// client/src/components/student/OnlineFeePayment.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios'; // Ensure axios is installed (npm install axios)

const OnlineFeePayment = ({ studentId, onPaymentSuccess }) => { // studentId is passed from the authenticated user context/prop
  const [outstandingFees, setOutstandingFees] = useState([]);
  const [selectedFeeDueId, setSelectedFeeDueId] = useState('');
  const [amountToPay, setAmountToPay] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  // Effect to dynamically load the Razorpay checkout script
  useEffect(() => {
    const script = document.createElement('script');
    script.src = "https://checkout.razorpay.com/v1/checkout.js";
    script.async = true; // Load script asynchronously
    document.body.appendChild(script);

    // Cleanup function to remove the script when the component unmounts
    return () => {
      document.body.removeChild(script);
    };
  }, []); // Empty dependency array means this runs once on mount and cleans up on unmount

  // Effect to fetch the student's outstanding fees from the backend
  useEffect(() => {
    const fetchOutstandingFees = async () => {
      if (!studentId) {
        setOutstandingFees([]);
        setSelectedFeeDueId('');
        setAmountToPay('');
        return;
      }

      setLoading(true);
      setError("");
      setMessage("");
      try {
        // API call to get outstanding fees for the current student
        // This assumes your backend route is GET /api/students/:id/fees/outstanding
        const res = await axios.get(`/api/students/${studentId}/fees/outstanding`);
        setOutstandingFees(res.data.outstandingFees);
        if (res.data.outstandingFees.length > 0) {
          // Auto-select the first outstanding fee and pre-fill the amount
          setSelectedFeeDueId(res.data.outstandingFees[0]._id);
          setAmountToPay(res.data.outstandingFees[0].balance.toFixed(2));
        } else {
            setSelectedFeeDueId('');
            setAmountToPay('');
        }
      } catch (err) {
        console.error("Error fetching outstanding fees:", err);
        setError(err.response?.data?.error || "Failed to load outstanding fees.");
      } finally {
        setLoading(false);
      }
    };
    fetchOutstandingFees();
  }, [studentId]); // Re-run this effect when the studentId prop changes

  // Handler for when the user selects a different outstanding fee from the dropdown
  const handleFeeSelection = (e) => {
    const selectedId = e.target.value;
    setSelectedFeeDueId(selectedId);
    const selectedFee = outstandingFees.find(fee => fee._id === selectedId);
    if (selectedFee) {
      setAmountToPay(selectedFee.balance.toFixed(2)); // Pre-fill with the selected fee's balance
    } else {
      setAmountToPay('');
    }
  };

  // Handles the "Pay Now" button click for online payment
  const handlePayNow = async (e) => {
    e.preventDefault();
    setMessage('');
    setError('');
    setLoading(true);

    // Frontend validation before initiating payment
    if (!selectedFeeDueId || isNaN(amountToPay) || parseFloat(amountToPay) <= 0) {
      setError("Please select a fee and enter a valid positive amount.");
      setLoading(false);
      return;
    }

    try {
      // 1. Call your backend to initiate the payment (create Razorpay order)
      // This assumes your backend route is POST /api/payments/initiate
      const response = await axios.post('/api/payments/initiate', {
        studentId: studentId, // Send the student ID to the backend
        studentFeeDueId: selectedFeeDueId, // Send the selected outstanding fee ID
        amount: parseFloat(amountToPay), // Send amount as a number
      });

      // Extract necessary data from the backend response for Razorpay checkout
      const { razorpayOrderId, amount, currency, keyId, studentName, studentEmail, studentPhone } = response.data;

      // 2. Configure Razorpay Checkout options
      const options = {
        key: keyId, // Your Razorpay Key ID (public key, obtained from backend)
        amount: amount, // Amount in paisa (from backend)
        currency: currency,
        name: 'College ERP System', // Your organization name
        description: 'College Fee Payment',
        order_id: razorpayOrderId, // The order ID generated by Razorpay on your backend
        handler: async function (response) {
          // This function is called by Razorpay on client-side upon successful payment.
          // IMPORTANT: Do NOT update your database here directly. The backend webhook will handle that.
          setMessage('Payment successful! Your transaction is being processed.');
          setError(''); // Clear any previous errors

          // Optionally, you can trigger a re-fetch of outstanding fees or navigate
          // after a short delay, allowing the backend webhook to update the DB.
          setTimeout(() => {
            if (onPaymentSuccess) onPaymentSuccess(); // Call parent callback
            // Or refresh the data in this component:
            // fetchOutstandingFees();
          }, 2000); // Wait 2 seconds for webhook to process
        },
        prefill: { // Prefill user details in the Razorpay checkout form
          name: studentName,
          email: studentEmail,
          contact: studentPhone,
        },
        notes: { // Custom notes that will be sent to Razorpay (can be seen in dashboard)
          studentId: studentId,
          studentFeeDueId: selectedFeeDueId,
        },
        theme: {
          color: '#3399cc', // Custom theme color for the Razorpay modal
        },
      };

      // 3. Open the Razorpay Checkout modal
      const rzp = new window.Razorpay(options);
      rzp.on('payment.failed', function (response) {
        // This event handler is called if the payment fails (e.g., card declined)
        setError(response.error?.description || "Payment failed. Please try again.");
        console.error("Razorpay Payment Failed:", response.error);
        setMessage(''); // Clear success message if any
      });
      rzp.open(); // Open the Razorpay payment modal

    } catch (err) {
      console.error("Error initiating payment from frontend:", err);
      // Display specific error message from backend if available
      setError(err.response?.data?.message || "Failed to initiate payment. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="online-fee-payment-container" style={{ padding: '20px', border: '1px solid #ccc', borderRadius: '8px', maxWidth: '500px', margin: '20px auto' }}>
      <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>Online Fee Payment</h2>
      {loading && outstandingFees.length === 0 && <p style={{ textAlign: 'center' }}>Loading outstanding fees...</p>}
      {message && <p className="success-message" style={{ color: 'green', textAlign: 'center' }}>{message}</p>}
      {error && <p className="error-message" style={{ color: 'red', textAlign: 'center' }}>{error}</p>}

      {!loading && outstandingFees.length === 0 && !error && (
        <p style={{ textAlign: 'center', fontStyle: 'italic' }}>No outstanding fees at the moment. You're all clear!</p>
      )}

      {!loading && outstandingFees.length > 0 && (
        <form onSubmit={handlePayNow} style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>
          <div className="form-group">
            <label htmlFor="selectFee" style={{ display: 'block', marginBottom: '5px' }}>Select Fee to Pay:</label>
            <select
              id="selectFee"
              value={selectedFeeDueId}
              onChange={handleFeeSelection}
              required
              style={{ width: '100%', padding: '8px', border: '1px solid #ddd', borderRadius: '4px' }}
            >
              <option value="">-- Select a fee --</option>
              {outstandingFees.map(fee => (
                <option key={fee._id} value={fee._id}>
                  {fee.feeStructure ? `${fee.feeStructure.name} - Balance: ₹${fee.balance.toFixed(2)}` : `Fee ID: ${fee._id} - Balance: ₹${fee.balance.toFixed(2)}`}
                  {fee.status === 'Partially Paid' && ' (Partially Paid)'}
                </option>
              ))}
            </select>
          </div>
          <div className="form-group">
            <label htmlFor="amountToPay" style={{ display: 'block', marginBottom: '5px' }}>Amount to Pay (₹):</label>
            <input
              id="amountToPay"
              type="number"
              value={amountToPay}
              onChange={(e) => setAmountToPay(e.target.value)}
              required
              min="0.01"
              step="0.01"
              // Max value should be the balance of the currently selected outstanding fee
              max={selectedFeeDueId ? outstandingFees.find(f => f._id === selectedFeeDueId)?.balance : ''}
              style={{ width: '100%', padding: '8px', border: '1px solid #ddd', borderRadius: '4px' }}
            />
          </div>
          <button type="submit" disabled={loading} style={{ padding: '10px 15px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '16px' }}>
            {loading ? 'Processing Payment...' : 'Pay Now'}
          </button>
        </form>
      )}
    </div>
  );
};

export default OnlineFeePayment;